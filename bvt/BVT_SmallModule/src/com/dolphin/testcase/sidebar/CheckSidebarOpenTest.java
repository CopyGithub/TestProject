package com.dolphin.testcase.sidebar;

import android.view.View;

import com.adolphin.common.BaseTest;
import com.adolphin.common.Res;
import com.robotium.solo.Solo;
import com.test.annotation.TestClass;
import com.test.annotation.TestNumber;

/**
 * 
 * 脚本编号：DOLINT-1323
 * <p>
 * 脚本描述：Sidebar开关开时,中屏机上侧边栏图标不显示
 * 
 * @author sjguo
 * 
 */
@TestNumber(value = "DOLINT-1323")
@TestClass("Sidebar开关开时,中屏机上侧边栏图标不显示")
public class CheckSidebarOpenTest extends BaseTest {
    public void testCheckSidebarOpen() {
        uiUtil.skipWelcome();
        // 非中屏机直接返回
        if (caseUtil.getDisplayRange() != 1) {
            return;
        }
        // 预置条件：开关状态为开
        uiUtil.enableSwipeSideBar(true);
        // 验证：横/竖屏:书签和Control Panel图标未显示在地址栏两侧
        solo.setActivityOrientation(Solo.PORTRAIT);
        solo.sleep(Res.integer.time_wait);
        uiUtil.isSidebarIconShow(false, false);
        solo.setActivityOrientation(Solo.LANDSCAPE);
        solo.sleep(Res.integer.time_wait);
        uiUtil.isSidebarIconShow(false, true);

        solo.setActivityOrientation(Solo.PORTRAIT);
        solo.sleep(Res.integer.time_wait);

        // 验证：左侧边栏展开
        checkOpen(true);
        // 验证：左侧边栏关闭
        checkClose(true);

        // 验证：右侧边栏展开
        checkOpen(false);
        // 验证：右侧边栏关闭
        checkClose(false);
    }

    private void checkClose(boolean isLeft) {
        /**
         * ①侧边栏中反向滑动 <br>
         * ②点击主屏区域 <br>
         * ③点击手机back键 <br>
         */
        solo.goBack();
        solo.sleep(Res.integer.time_wait);
        if (isLeft) {
            View leftView = caseUtil.getViewByIndex(solo.getView("content"), new int[] { 0, 1 });
            assertTrue("Still in Left side...", leftView.getVisibility() == View.INVISIBLE);
        } else {
            View rightView = caseUtil.getViewByIndex(solo.getView("content"), new int[] { 0, 2 });
            assertTrue("Still in Right side...", rightView.getVisibility() == View.INVISIBLE);
        }

    }

    private void checkOpen(boolean isLeft) {
        if (isLeft) {
            caseUtil.slide(null, 0.01f, 0.7f, 0.99f, 0.7f, 1f);
            solo.sleep(Res.integer.time_wait);
            View leftView = caseUtil.getViewByIndex(solo.getView("content"), new int[] { 0, 1 });
            assertTrue("Not into Left side...", leftView.getVisibility() == View.VISIBLE);
        } else {
            caseUtil.slide(null, 0.99f, 0.7f, 0.01f, 0.7f, 1f);
            solo.sleep(Res.integer.time_wait);
            View rightView = caseUtil.getViewByIndex(solo.getView("content"), new int[] { 0, 2 });
            assertTrue("Not into Right side...", rightView.getVisibility() == View.VISIBLE);
        }

    }

}